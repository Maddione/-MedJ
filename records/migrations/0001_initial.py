# Generated by Django 4.2.14 on 2025-09-07 14:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import parler.fields
import parler.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_date', models.DateField(blank=True, null=True)),
                ('date_created', models.DateField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(upload_to='documents/')),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('file_mime', models.CharField(blank=True, max_length=120, null=True)),
                ('doc_kind', models.CharField(choices=[('image', 'image'), ('pdf', 'pdf'), ('other', 'other')], default='other', max_length=16)),
                ('sha256', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('original_ocr_text', models.TextField(blank=True, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='LabIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('unit', models.CharField(blank=True, max_length=64, null=True)),
                ('reference_low', models.FloatField(blank=True, null=True)),
                ('reference_high', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MedicalCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MedicalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateField()),
                ('summary', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='events', to='records.medicalcategory')),
                ('doc_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='events', to='records.documenttype')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalSpecialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('kind', models.CharField(choices=[('specialty', 'specialty'), ('category', 'category'), ('doc_type', 'doc_type'), ('doc_kind', 'doc_kind'), ('indicator', 'indicator'), ('doctor', 'doctor'), ('time', 'time'), ('file_type', 'file_type'), ('system', 'system')], default='system', max_length=32)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ShareLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=64, unique=True)),
                ('object_type', models.CharField(choices=[('document', 'document'), ('event', 'event')], max_length=16)),
                ('object_id', models.PositiveIntegerField()),
                ('scope', models.CharField(blank=True, max_length=255, null=True)),
                ('format', models.CharField(choices=[('pdf', 'pdf'), ('csv', 'csv'), ('html', 'html')], default='html', max_length=8)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('password_hash', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.CharField(choices=[('active', 'active'), ('revoked', 'revoked')], default='active', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='share_links', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Practitioner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practitioners', to=settings.AUTH_USER_MODEL)),
                ('specialty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='practitioners', to='records.medicalspecialty')),
            ],
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name_bg', models.CharField(blank=True, max_length=120, null=True)),
                ('middle_name_bg', models.CharField(blank=True, max_length=120, null=True)),
                ('last_name_bg', models.CharField(blank=True, max_length=120, null=True)),
                ('first_name_en', models.CharField(blank=True, max_length=120, null=True)),
                ('middle_name_en', models.CharField(blank=True, max_length=120, null=True)),
                ('last_name_en', models.CharField(blank=True, max_length=120, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, max_length=20, null=True)),
                ('blood_type', models.CharField(blank=True, max_length=10, null=True)),
                ('height_cm', models.PositiveIntegerField(blank=True, null=True)),
                ('weight_kg', models.PositiveIntegerField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=64, null=True)),
                ('share_enabled', models.BooleanField(default=False)),
                ('share_token', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OcrLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('vision', 'vision'), ('flask', 'flask')], max_length=16)),
                ('duration_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocr_logs', to='records.document')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocr_logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NarrativeNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('medical_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='records.medicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('dose', models.CharField(blank=True, max_length=255, null=True)),
                ('frequency', models.CharField(blank=True, max_length=255, null=True)),
                ('medical_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='records.medicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalSpecialtyTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='records.medicalspecialty')),
            ],
            options={
                'verbose_name': 'medical specialty Translation',
                'db_table': 'records_medicalspecialty_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='medicalevent',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='records.patientprofile'),
        ),
        migrations.AddField(
            model_name='medicalevent',
            name='specialty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='records.medicalspecialty'),
        ),
        migrations.AddField(
            model_name='medicalevent',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='events', through='records.EventTag', to='records.tag'),
        ),
        migrations.CreateModel(
            name='MedicalCategoryTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='records.medicalcategory')),
            ],
            options={
                'verbose_name': 'medical category Translation',
                'db_table': 'records_medicalcategory_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LabTestMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('measured_at', models.DateTimeField()),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='measurements', to='records.labindicator')),
                ('medical_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labtests', to='records.medicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='LabIndicatorTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='records.labindicator')),
            ],
            options={
                'verbose_name': 'lab indicator Translation',
                'db_table': 'records_labindicator_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LabIndicatorAlias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias_raw', models.CharField(max_length=255)),
                ('normalized', models.CharField(blank=True, max_length=255)),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='records.labindicator')),
            ],
        ),
        migrations.AddField(
            model_name='eventtag',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.medicalevent'),
        ),
        migrations.AddField(
            model_name='eventtag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.tag'),
        ),
        migrations.CreateModel(
            name='DocumentTypeTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='records.documenttype')),
            ],
            options={
                'verbose_name': 'document type Translation',
                'db_table': 'records_documenttype_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DocumentTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_inherited', models.BooleanField(default=False)),
                ('is_permanent', models.BooleanField(default=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.document')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.tag')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentPractitioner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('author', 'author'), ('mentioned', 'mentioned')], default='author', max_length=16)),
                ('is_primary', models.BooleanField(default=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_practitioners', to='records.document')),
                ('practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_links', to='records.practitioner')),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='records.medicalcategory'),
        ),
        migrations.AddField(
            model_name='document',
            name='doc_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='records.documenttype'),
        ),
        migrations.AddField(
            model_name='document',
            name='medical_event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='records.medicalevent'),
        ),
        migrations.AddField(
            model_name='document',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='document',
            name='specialty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='records.medicalspecialty'),
        ),
        migrations.AddField(
            model_name='document',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='documents', through='records.DocumentTag', to='records.tag'),
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=64)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('medical_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='records.medicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='TagTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='records.tag')),
            ],
            options={
                'verbose_name': 'tag Translation',
                'db_table': 'records_tag_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['owner', 'full_name'], name='records_pra_owner_i_5f5d7e_idx'),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['owner', 'specialty'], name='records_pra_owner_i_c87e63_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='practitioner',
            unique_together={('owner', 'full_name', 'specialty')},
        ),
        migrations.AlterUniqueTogether(
            name='medicalspecialtytranslation',
            unique_together={('language_code', 'master')},
        ),
        migrations.AlterUniqueTogether(
            name='medicalcategorytranslation',
            unique_together={('language_code', 'master')},
        ),
        migrations.AlterUniqueTogether(
            name='labindicatortranslation',
            unique_together={('language_code', 'master')},
        ),
        migrations.AlterUniqueTogether(
            name='labindicatoralias',
            unique_together={('indicator', 'alias_raw')},
        ),
        migrations.AlterUniqueTogether(
            name='eventtag',
            unique_together={('event', 'tag')},
        ),
        migrations.AlterUniqueTogether(
            name='documenttypetranslation',
            unique_together={('language_code', 'master')},
        ),
        migrations.AlterUniqueTogether(
            name='documenttag',
            unique_together={('document', 'tag')},
        ),
        migrations.AddIndex(
            model_name='documentpractitioner',
            index=models.Index(fields=['document', 'is_primary'], name='records_doc_documen_2d9a49_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='documentpractitioner',
            unique_together={('document', 'practitioner', 'role')},
        ),
    ]
