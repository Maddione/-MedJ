# Generated by Django 5.0.6 on 2025-08-27 10:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import parler.fields
import parler.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Document Type',
                'verbose_name_plural': 'Document Types',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LabIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name_bg', models.CharField(blank=True, max_length=255, null=True)),
                ('name_en', models.CharField(blank=True, max_length=255, null=True)),
                ('aliases_json', models.TextField(blank=True, null=True)),
                ('default_unit', models.CharField(blank=True, max_length=32, null=True)),
                ('default_ref_low', models.FloatField(blank=True, null=True)),
                ('default_ref_high', models.FloatField(blank=True, null=True)),
                ('ref_notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Medical Category',
                'verbose_name_plural': 'Medical Categories',
            },
        ),
        migrations.CreateModel(
            name='MedicalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateField()),
                ('summary', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-event_date'],
            },
        ),
        migrations.CreateModel(
            name='MedicalSpecialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Medical Specialty',
                'verbose_name_plural': 'Medical Specialties',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('category', models.CharField(choices=[('generic', 'Generic'), ('specialty', 'Specialty'), ('doctor', 'Doctor'), ('medication', 'Medication'), ('auto', 'Auto'), ('manual', 'Manual')], default='generic', max_length=32)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('patient', 'Patient'), ('practitioner', 'Practitioner')], default='patient', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.medicalevent')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_text', models.TextField()),
                ('icd10_code', models.CharField(blank=True, max_length=16, null=True)),
                ('diagnosed_at', models.DateField(blank=True, null=True)),
                ('medical_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='records.medicalevent')),
            ],
        ),
        migrations.AddField(
            model_name='medicalevent',
            name='specialty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='records.medicalspecialty'),
        ),
        migrations.CreateModel(
            name='NarrativeSectionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_title', models.CharField(max_length=255)),
                ('section_content', models.TextField()),
                ('medical_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='narrative_sections', to='records.medicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=10, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=64, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('blood_type', models.CharField(blank=True, max_length=8, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='medicalevent',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.patientprofile'),
        ),
        migrations.CreateModel(
            name='PractitionerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('practitioner_type', models.CharField(choices=[('physician', 'Physician'), ('nurse', 'Nurse'), ('other', 'Other')], default='physician', max_length=20)),
                ('specialty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='records.medicalspecialty')),
            ],
        ),
        migrations.AddField(
            model_name='medicalevent',
            name='practitioners',
            field=models.ManyToManyField(blank=True, to='records.practitionerprofile'),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_date', models.DateField()),
                ('file', models.FileField(upload_to='documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'png', 'jpg', 'jpeg'])])),
                ('doc_kind', models.CharField(choices=[('image', 'Image'), ('pdf', 'PDF'), ('other', 'Other')], default='pdf', max_length=16)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('original_ocr_text', models.TextField(blank=True, null=True)),
                ('sha256', models.CharField(blank=True, db_index=True, max_length=64)),
                ('doc_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='records.documenttype')),
                ('medical_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='records.medicalevent')),
                ('practitioner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='records.practitionerprofile')),
            ],
            options={
                'ordering': ['-document_date', '-uploaded_at'],
            },
        ),
        migrations.AddField(
            model_name='medicalevent',
            name='tags',
            field=models.ManyToManyField(blank=True, through='records.EventTag', to='records.tag'),
        ),
        migrations.CreateModel(
            name='DocumentTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_inherited', models.BooleanField(default=False)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.document')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='records.tag')),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='tags',
            field=models.ManyToManyField(blank=True, through='records.DocumentTag', to='records.tag'),
        ),
        migrations.CreateModel(
            name='TreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_text', models.TextField()),
                ('medications_list', models.TextField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('medical_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='records.medicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentTypeTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=64, null=True)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='records.documenttype')),
            ],
            options={
                'verbose_name': 'Document Type Translation',
                'db_table': 'records_documenttype_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LabTestMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measured_at', models.DateField()),
                ('value_raw', models.CharField(blank=True, max_length=64, null=True)),
                ('unit_raw', models.CharField(blank=True, max_length=32, null=True)),
                ('value_si', models.FloatField(blank=True, null=True)),
                ('unit_si', models.CharField(blank=True, max_length=32, null=True)),
                ('ref_low_si', models.FloatField(blank=True, null=True)),
                ('ref_high_si', models.FloatField(blank=True, null=True)),
                ('ref_source', models.CharField(choices=[('document', 'From Document'), ('patient', 'From Patient Profile'), ('indicator_default', 'Indicator Default'), ('lab_profile', 'Lab Profile')], default='indicator_default', max_length=32)),
                ('is_abnormal', models.BooleanField(null=True)),
                ('source_row_json', models.TextField(blank=True, null=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_measurements', to='records.document')),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='measurements', to='records.labindicator')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_measurements', to='records.medicalevent')),
            ],
            options={
                'ordering': ['-measured_at', '-id'],
                'indexes': [models.Index(fields=['event', 'measured_at'], name='records_lab_event_i_eb922f_idx'), models.Index(fields=['indicator', 'measured_at'], name='records_lab_indicat_226261_idx'), models.Index(fields=['is_abnormal'], name='records_lab_is_abno_cfd186_idx')],
            },
        ),
        migrations.CreateModel(
            name='MedicalSpecialtyTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='records.medicalspecialty')),
            ],
            options={
                'verbose_name': 'Medical Specialty Translation',
                'db_table': 'records_medicalspecialty_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ShareToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('scope', models.CharField(choices=[('document', 'Document'), ('event', 'Event')], max_length=16)),
                ('allow_download', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('times_used', models.PositiveIntegerField(default=0)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='share_tokens', to='records.document')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='share_tokens', to='records.medicalevent')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='share_tokens', to='records.patientprofile')),
            ],
            options={
                'indexes': [models.Index(fields=['token'], name='records_sha_token_95c212_idx'), models.Index(fields=['scope', 'is_active'], name='records_sha_scope_e32d34_idx'), models.Index(fields=['expires_at'], name='records_sha_expires_cd8674_idx')],
            },
        ),
    ]
